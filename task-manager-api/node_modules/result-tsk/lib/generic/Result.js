"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Result_metadata;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Result = void 0;
const ResultDto_1 = require("../ResultDto");
class Result {
    constructor() {
        _Result_metadata.set(this, void 0);
    }
    setMetadata(metadata) {
        __classPrivateFieldSet(this, _Result_metadata, metadata, "f");
    }
    addMetadata(key, value) {
        if (!__classPrivateFieldGet(this, _Result_metadata, "f"))
            __classPrivateFieldSet(this, _Result_metadata, {}, "f");
        __classPrivateFieldGet(this, _Result_metadata, "f")[key] = value;
    }
    getMetadata() {
        return __classPrivateFieldGet(this, _Result_metadata, "f");
    }
    hasMetadata() {
        return !!__classPrivateFieldGet(this, _Result_metadata, "f") && Object.keys(__classPrivateFieldGet(this, _Result_metadata, "f")).length > 0;
    }
    setStatusCode(statusCode, success) {
        this.statusCode = statusCode;
        this.success = success;
    }
    setMessage(message, statusCode) {
        this.message = message;
        this.statusCode = statusCode;
        this.success = true;
    }
    setError(error, statusCode) {
        this.error = error;
        this.statusCode = statusCode;
        this.success = false;
    }
    hasError() {
        return !!this.error;
    }
    hasMessage() {
        return !!this.message;
    }
    hasData() {
        return !!this.data;
    }
    setData(data, statusCode, message) {
        this.data = data;
        this.statusCode = statusCode;
        this.success = true;
        if (message) {
            this.message = message;
        }
    }
    toResultDto() {
        const result = new ResultDto_1.ResultDto();
        result.error = this.error;
        result.message = this.message;
        result.data = this.data;
        return result;
    }
}
exports.Result = Result;
_Result_metadata = new WeakMap();
